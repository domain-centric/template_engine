[//]: # (This document was generated by template_engine/tool/generate_documentation.dart using template_engine/doc/template/README.md.template)
[![Pub Package](https://img.shields.io/pub/v/template_engine)](https://pub.dev/packages/template_engine)
[![Code Repository](https://img.shields.io/badge/repository-git%20hub-informational)](https://github.com/domain-centric/template_engine)
[![GitHub Stars](https://img.shields.io/github/stars/domain-centric/template_engine)](https://github.com/domain-centric/template_engine/stargazers)
[![GitHub Issues](https://img.shields.io/github/issues/domain-centric/template_engine)](https://github.com/domain-centric/template_engine/issues)
[![GitHub Pull Requests](https://img.shields.io/github/issues-pr/domain-centric/template_engine)](https://github.com/domain-centric/template_engine/pulls)
[![GitHub License](https://img.shields.io/badge/license-MIT-informational)](https://github.com/domain-centric/template_engine/blob/main/LICENSE)

![](https://raw.githubusercontent.com/domain-centric/template_engine/main/doc/template/template_engine.png)

# template_engine
A flexible Dart library to parse templates and render output such as:
* [Html](https://en.wikipedia.org/wiki/HTML)
* [Programming code](https://en.wikipedia.org/wiki/Programming_language)
* [Markdown](https://en.wikipedia.org/wiki/Markdown)
* [Xml](https://en.wikipedia.org/wiki/XML), [Json](https://en.wikipedia.org/wiki/JSON), [Yaml](https://en.wikipedia.org/wiki/YAML)
* Etc...

# Features
* You can use expression containing:
  * Base types
  * Constants
  * Variables
  * Operators
  * Functions
* All of the above can be customized or you could add your own.

# Getting started

See: [Installing](https://pub.dev/packages/template_engine/install)

# Examples

```dart
import 'package:template_engine/template_engine.dart';

void main() {
  var template = TextTemplate('Hello {{name}}.');
  // See also FileTemplate and WebTemplate
  var engine = TemplateEngine();
  var parseResult = engine.parse(template, {'name': 'world'});
  // Here you could additionally mutate or validate the parseResult if needed.
  print(engine.render(parseResult)); // should print 'Hello world.';
}
```

Note the documentation of the template_engine package was generated by itself.
See: [tool/generate_documentation.dart](https://github.com/domain-centric/template_engine/blob/main/tool/generate_documentation.dart)

For more see: [Examples](https://pub.dev/packages/template_engine/example)

# Tags
{{engine.tag.documentation(2)}}

# Base types in tag expressions
{{engine.baseType.documentation(2)}}

# Variables in tag expressions
[//]: # (TODO: This text should be imported from the dart doc of the VariableExpression class using document_generator package)
a [Variable](https://en.wikipedia.org/wiki/Variable_(computer_science)) is 
an abstract storage location paired with an associated
symbolic name, which contains some known or unknown quantity of information
referred to as a value; or in simpler terms, a [VariableExpression] is a
named container for a particular set of bits or type of data
(like number, boolean, String etc...)
 
Variables in the [TemplateEngine]:
* Variables be used in an [ExpressionTag]:
* Initial variable values are passed to the TemplateEngine.render method
* Variables can be modified during rendering 

The [VariableName] identifies the [Variable] and corresponds with the keys
in the [Variables] map.

[//]: # (TODO: This text should be imported from the dart doc of the VariableName class using document_generator package)
The [VariableName]:
* must be unique and does not match a other [Tag] syntax
* must start with a letter, optionally followed by letters and or digits.
* is case sensitive (convention: use [camelCase](https://en.wikipedia.org/wiki/Camel_case))

Variables can be nested. Concatenate [VariableName]s separated with dot's
to get the [VariableValue] of a nested [Variable].

E.g.:
[Variables] map: {'person': {'name': 'John Doe', 'age',30}}
[VariableName] person.name: refers to the [VariableValue] of 'John Doe'
 
Examples of the use of an variable:
* (Variable Example)[https://github.com/domain-centric/template_engine/blob/main/example/tag_variable_simple.dart]
* (Nested Variable Example)[https://github.com/domain-centric/template_engine/blob/main/example/tag_variable_nested.dart]

# Functions in tag expressions
{{engine.function.documentation(2)}}