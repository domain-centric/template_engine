[//]: # (This document was generated by template_engine/tool/generate_documentation.dart using template_engine/doc/template/README.md.template)
[![Pub Package](https://img.shields.io/pub/v/template_engine)](https://pub.dev/packages/template_engine)
[![Code Repository](https://img.shields.io/badge/repository-git%20hub-informational)](https://github.com/domain-centric/template_engine)
[![GitHub Stars](https://img.shields.io/github/stars/domain-centric/template_engine)](https://github.com/domain-centric/template_engine/stargazers)
[![GitHub Issues](https://img.shields.io/github/issues/domain-centric/template_engine)](https://github.com/domain-centric/template_engine/issues)
[![GitHub Pull Requests](https://img.shields.io/github/issues-pr/domain-centric/template_engine)](https://github.com/domain-centric/template_engine/pulls)
[![GitHub License](https://img.shields.io/badge/license-MIT-informational)](https://github.com/domain-centric/template_engine/blob/main/LICENSE)

![](https://raw.githubusercontent.com/domain-centric/template_engine/main/doc/template/template_engine.png)

[//]: # (TODO: This text should be imported from the dart doc of the TemplateEngine class using document_generator package)
# template_engine
A flexible Dart library to parse templates and render output such as:
* [Html](https://en.wikipedia.org/wiki/HTML)
* [Programming code](https://en.wikipedia.org/wiki/Programming_language)
* [Markdown](https://en.wikipedia.org/wiki/Markdown)
* [Xml](https://en.wikipedia.org/wiki/XML), [Json](https://en.wikipedia.org/wiki/JSON), [Yaml](https://en.wikipedia.org/wiki/YAML)
* Etc...

# Features
* Template expressions that can contain (combinations of):
  * Data types
  * Constants
  * Variables
  * Operators
  * Functions
* All of the above can be customized or you could add your own.

# Getting started

See: [Installing](https://pub.dev/packages/template_engine/install)

# Examples

```dart
import 'package:template_engine/template_engine.dart';

void main() {
  var template = TextTemplate('Hello {{name}}.');
  // See also FileTemplate and WebTemplate
  var engine = TemplateEngine();
  var parseResult = engine.parse(template, {'name': 'world'});
  // Here you could additionally mutate or validate the parseResult if needed.
  print(engine.render(parseResult)); // should print 'Hello world.';
}
```

Note the documentation of the template_engine package was generated by itself.
See: [tool/generate_documentation.dart](https://github.com/domain-centric/template_engine/blob/main/tool/generate_documentation.dart)

For more see: [Examples](https://pub.dev/packages/template_engine/example)

# Tags
[//]: # (TODO: This text should be imported from the dart doc of the Tag class using document_generator package)
Tags are specific texts in templates that are replaced by the
TemplateEngine with other information.

A tag:
* Starts with some bracket and/or character combination, e.g.: {{
* Followed by some contents
* Ends with some closing bracket and/or character combination, e.g.: }}

A tag example: \{{customer.name\}}

By default the TemplateEngine tags start with {{ and end with }} brackets,
just like the popular template engines [Mustache](http://mustache.github.io/) 
and [Handlebars](https://handlebarsjs.com).

You can also define alternative tag brackets in the TemplateEngine constructor
parameters. See TemplateEngine.tagStart and TemplateEngine.tagEnd.

It is recommended to use a start and end combination that is not used
elsewhere in your templates, e.g.: Do not use < > as tag start and end
if your template contains HTML or XML.

The TemplateEngine comes with default tags. You can replace or add your
own tags by manipulating the the TemplateEngine.tags field.

{{engine.tag.documentation(2)}}

# Data types in tag expressions
[//]: # (TODO: This text should be imported from the dart doc of the DataType class using document_generator package)
A [data type](https://en.wikipedia.org/wiki/Data_type) defines what the
possible values an expression, such as a variable, operator
or a function call, might take.

The TemplateEngine supports several default DataTypes.

## Custom DataTypes
You can adopt existing DataTypes or add your own custom DataTypes by 
manipulating the TemplateEngine.dataTypes field.
See [Example](https://github.com/domain-centric/template_engine/blob/main/test/src/parser/tag/expression/data_type/custom_test.dart). 

## Available DataTypes
{{engine.dataType.documentation(2)}}

# Variables in tag expressions
[//]: # (TODO: This text should be imported from the dart doc of the Variable class using document_generator package)
A [Variable](https://en.wikipedia.org/wiki/Variable_(computer_science)) is
a named container for some type of information 
(like number, boolean, String etc...)
 
[//]: # (TODO: This text should be imported from the dart doc of the Variables typedef using document_generator package)
* Variables are stored as key, value pairs in a dart Map<String, Object> where:
  * String=Variable name
  * Object=Variable value
* Variables can be used in a tag expression
* Initial variable values are passed to the TemplateEngine.render method
* Variables can be modified during rendering 

[//]: # (TODO: This text should be imported from the dart doc of the VariableName class using document_generator package)
The variable name:
* must be unique and does not match a other [Tag] syntax
* must start with a letter, optionally followed by letters and or digits
* is case sensitive (convention: use [camelCase](https://en.wikipedia.org/wiki/Camel_case))

Variables can be nested. Concatenate variable names separated with dot's
to get the variable value of a nested variable.

E.g.:<br>
Variable map: {'person': {'name': 'John Doe', 'age',30}}<br>
Variable Name person.name: refers to the variable value of 'John Doe'
 
Examples:
* [Variable Example](https://github.com/domain-centric/template_engine/blob/main/test/src/parser/tag/expression/variable/variable_test.dart)
* [Nested Variable Example](https://github.com/domain-centric/template_engine/blob/main/test/src/parser/tag/expression/variable/nested_variable_test.dart)

# Functions in tag expressions
[//]: # (TODO: This text should be imported from the dart doc of the ExpressionFunction class using document_generator package)
A function is a piece of dart code that performs a specific task. 
So a function can basically do anything that dart code can do.
 
A function can then be used anywhere in an tag expression
wherever that particular task should be performed.
 
The TemplateEngine supports several default functions.
 
## Custom Functions
You can adopt existing functions or add your own custom functions by 
manipulating the TemplateEngine.functionGroup field.
See [Example](https://github.com/domain-centric/template_engine/blob/main/test/src/parser/tag/expression/function/custom_function_test.dart). 

## Available Functions
{{engine.function.documentation(2)}}